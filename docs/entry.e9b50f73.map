{"version":3,"sources":["src/Game.ts","src/Figure.ts","src/utils.ts","src/Snake.ts","src/drawers.ts","src/main.ts","src/entry.ts"],"names":[],"mappings":"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","file":"entry.e9b50f73.map","sourceRoot":"..","sourcesContent":["export const CELL_SIZE: number = 20\n\nexport enum Direction {\n\tUp = 38,\n\tDown = 40,\n\tLeft = 37,\n\tRight = 39\n}\n\nexport interface GameBlock {\n\tx: number\n\ty: number\n\twidth: number\n\theight: number\n}\n\nexport interface GridPosition {\n\tcol: number\n\trow: number\n\tblockNumber: number\n\tcols: number\n\trows: number\n}\n\nexport interface GameConstraints extends GameBlock {}\n\nexport class Game {\n\tctx: CanvasRenderingContext2D\n\tcellSize: number = CELL_SIZE\n\n\tconstructor(ctx: CanvasRenderingContext2D) {\n\t\tthis.ctx = ctx\n\t}\n\n\tget width(): number {\n\t\treturn this.ctx.canvas.width\n\t}\n\n\tget height(): number {\n\t\treturn this.ctx.canvas.height\n\t}\n\n\tget rows(): number {\n\t\treturn this.height / this.cellSize\n\t}\n\n\tget cols(): number {\n\t\treturn this.width / this.cellSize\n\t}\n\n\tget totalCels(): number {\n\t\treturn this.rows * this.cols\n\t}\n\n\tget constraints(): GameConstraints {\n\t\treturn {\n\t\t\tx: this.cellSize,\n\t\t\ty: this.cellSize,\n\t\t\twidth: this.width - this.cellSize,\n\t\t\theight: this.height - this.cellSize\n\t\t}\n\t}\n\n\tcalculateGridPosition(blockNumber: number): GridPosition {\n\t\tconst { cols, rows } = this\n\t\tconst col = blockNumber % rows\n\t\tconst row = blockNumber === 0 ? 0 : rows / (blockNumber - col)\n\n\t\tconst position: GridPosition = {\n\t\t\tcol,\n\t\t\trow,\n\t\t\tblockNumber,\n\t\t\tcols,\n\t\t\trows\n\t\t}\n\n\t\treturn position\n\t}\n\n\tcalculatePosition(blockNumber: number): GameBlock {\n\t\tblockNumber = parseInt(blockNumber.toString())\n\n\t\tconst constraints: GameConstraints = this.constraints\n\t\tconst { col, row } = this.calculateGridPosition(blockNumber)\n\n\t\treturn {\n\t\t\tx: col * this.cellSize,\n\t\t\ty: row * this.cellSize,\n\t\t\twidth: this.cellSize,\n\t\t\theight: this.cellSize\n\t\t}\n\t}\n}\n","export class Figure {\n\tbody: Array<number> = []\n}\n","export const hsl = (h: number = 0, s: number = 0, l: number = 0): string =>\n\t`hsl(${h}, ${s}%, ${l}%)`\n","import { Figure } from './Figure'\nimport { Game, Direction } from './Game'\nimport { hsl } from './utils'\n\nexport class Snake extends Figure {\n\tspeedX: number = 0\n\tspeedY: number = 0\n\tcolor: string = hsl(163, 50, 49)\n\tspeed: number = 0.0001\n\tgame: Game\n\n\tconstructor(game: Game) {\n\t\tsuper()\n\t\tthis.game = game\n\t}\n\n\tupdate(): void {\n\t\tthis.body = this.body.map(\n\t\t\t(currentBlock: number): number =>\n\t\t\t\tcurrentBlock +\n\t\t\t\tcurrentBlock * this.speedX +\n\t\t\t\tcurrentBlock * this.speedY * this.game.rows\n\t\t)\n\t}\n\n\tchangeDirection(direction: Direction): void {\n\t\tif (direction === Direction.Down) {\n\t\t\tthis.speedX = 0\n\t\t\tthis.speedY = this.speed\n\t\t}\n\n\t\tif (direction === Direction.Up) {\n\t\t\tthis.speedX = 0\n\t\t\tthis.speedY = -this.speed\n\t\t}\n\n\t\tif (direction === Direction.Left) {\n\t\t\tthis.speedX = -this.speed\n\t\t\tthis.speedY = 0\n\t\t}\n\n\t\tif (direction === Direction.Right) {\n\t\t\tthis.speedX = this.speed\n\t\t\tthis.speedY = 0\n\t\t}\n\t}\n}\n","import { Snake } from './Snake'\nimport { Game, GameBlock } from './Game'\nimport { hsl } from './utils'\n\nexport const clearCanvas = (game: Game) =>\n\tgame.ctx.clearRect(0, 0, game.width, game.height)\n\nexport const drawBackground = (game: Game) => {\n\tconst { ctx } = game\n\tctx.fillStyle = hsl(192, 45, 2)\n\tctx.fillRect(0, 0, ctx.canvas.width, ctx.canvas.height)\n}\n\nexport const drawWalls = (game: Game) => {\n\tconst { ctx, width, height } = game\n\n\tctx.fillStyle = hsl(112, 50, 63)\n\n\tctx.fillRect(0, 0, game.cellSize, height)\n\tctx.fillRect(0, 0, width, game.cellSize)\n\n\tctx.fillRect(width - game.cellSize, 0, game.cellSize, height)\n\tctx.fillRect(0, height - game.cellSize, width, game.cellSize)\n}\n\nexport const drawGameBlock = (\n\tctx: CanvasRenderingContext2D,\n\tblock: GameBlock,\n\tcolor = '#000'\n): void => {\n\tctx.fillStyle = color\n\tctx.fillRect(block.x, block.y, block.width, block.height)\n}\n\nexport const drawSnake = (game: Game, snake: Snake) => {\n\tconst { ctx } = game\n\tconst { body = [] } = snake\n\tctx.fillStyle = snake.color\n\n\tfor (let chunkCellNumber of body) {\n\t\tconst bodyBlock: GameBlock = game.calculatePosition(chunkCellNumber)\n\t\tdrawGameBlock(game.ctx, bodyBlock, snake.color)\n\t}\n}\n","import { Game } from './Game'\nimport { Snake } from './Snake'\nimport { clearCanvas, drawBackground, drawSnake, drawWalls } from './drawers'\n\nexport const createCanvas = (): HTMLCanvasElement =>\n\t<HTMLCanvasElement>document.getElementById('game')\n\nconst calculateCollision = () => {}\n\nconst ctx: CanvasRenderingContext2D = <CanvasRenderingContext2D>(\n\tcreateCanvas().getContext('2d')\n)\n\n// Setup\nconst game = new Game(ctx)\nconst player = new Snake(game)\n\ndocument.addEventListener('keydown', (event: KeyboardEvent) =>\n\tplayer.changeDirection(event.keyCode)\n)\n\nconst render = (): void => {\n\tplayer.update()\n\n\tclearCanvas(game)\n\tdrawBackground(game)\n\tdrawWalls(game)\n\n\tdrawSnake(game, player)\n}\n\nexport const loop = () => render() && window.requestAnimationFrame(loop)\n","import { loop } from './main'\nloop()\n"]}